{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { getConstants } from \"../helpers\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./enums\";\nimport TextInputAffix, { AffixAdornment } from \"./TextInputAffix\";\nimport TextInputIcon, { IconAdornment } from \"./TextInputIcon\";\nexport function getAdornmentConfig(_ref) {\n  var left = _ref.left,\n    right = _ref.right;\n  var adornmentConfig = [];\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n        adornment = _ref2.adornment;\n      if (adornment && React.isValidElement(adornment)) {\n        var type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n    leftAffixWidth = _ref3.leftAffixWidth,\n    rightAffixWidth = _ref3.rightAffixWidth,\n    paddingHorizontal = _ref3.paddingHorizontal,\n    _ref3$inputOffset = _ref3.inputOffset,\n    inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n    mode = _ref3.mode,\n    isV3 = _ref3.isV3;\n  var _getConstants = getConstants(isV3),\n    OUTLINED_INPUT_OFFSET = _getConstants.OUTLINED_INPUT_OFFSET,\n    ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref7;\n      var type = _ref4.type,\n        side = _ref4.side;\n      var isLeftSide = side === AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      var paddingKey = \"padding\" + captalize(side);\n      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      var offset = affixWidth + padding;\n      var isAffix = type === AdornmentType.Affix;\n      var marginKey = \"margin\" + captalize(side);\n      return _ref7 = {}, _defineProperty(_ref7, marginKey, isAffix ? 0 : offset), _defineProperty(_ref7, paddingKey, isAffix ? offset : inputOffset), _ref7;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\nvar TextInputAdornment = function TextInputAdornment(_ref5) {\n  var adornmentConfig = _ref5.adornmentConfig,\n    left = _ref5.left,\n    right = _ref5.right,\n    onAffixChange = _ref5.onAffixChange,\n    textStyle = _ref5.textStyle,\n    visible = _ref5.visible,\n    topPosition = _ref5.topPosition,\n    isTextInputFocused = _ref5.isTextInputFocused,\n    forceFocus = _ref5.forceFocus,\n    paddingHorizontal = _ref5.paddingHorizontal,\n    maxFontSizeMultiplier = _ref5.maxFontSizeMultiplier;\n  if (adornmentConfig.length) {\n    return React.createElement(React.Fragment, null, adornmentConfig.map(function (_ref6) {\n      var type = _ref6.type,\n        side = _ref6.side;\n      var inputAdornmentComponent;\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n      var commonProps = {\n        side: side,\n        testID: side + \"-\" + type + \"-adornment\",\n        isTextInputFocused: isTextInputFocused,\n        paddingHorizontal: paddingHorizontal\n      };\n      if (type === AdornmentType.Icon) {\n        return React.createElement(IconAdornment, _extends({}, commonProps, {\n          key: side,\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return React.createElement(AffixAdornment, _extends({}, commonProps, {\n          key: side,\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible,\n          maxFontSizeMultiplier: maxFontSizeMultiplier\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\nexport default TextInputAdornment;","map":{"version":3,"mappings":"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","names":["React","getConstants","AdornmentSide","AdornmentType","InputMode","TextInputAffix","AffixAdornment","TextInputIcon","IconAdornment","getAdornmentConfig","left","_ref","right","adornmentConfig","side","Left","adornment","Right","forEach","_ref2","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","_ref3","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","isV3","OUTLINED_INPUT_OFFSET","ADORNMENT_OFFSET","length","adornmentStyleAdjustmentForNativeInput","map","_ref4","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","_ref5","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","_ref6","inputAdornmentComponent","commonProps","testID","key","icon","affix","onLayout"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\n\nimport { getConstants } from '../helpers';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n  isV3,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n  isV3?: boolean;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  const { OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET } = getConstants(isV3);\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                key={side}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                key={side}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}