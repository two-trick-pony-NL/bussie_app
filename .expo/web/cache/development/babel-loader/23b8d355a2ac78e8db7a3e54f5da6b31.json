{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { createTheming } from '@callstack/react-theme-provider';\nimport color from 'color';\nimport { MD2DarkTheme, MD2LightTheme, MD3DarkTheme, MD3LightTheme } from \"../styles/themes\";\nexport var DefaultTheme = MD3LightTheme;\nvar _createTheming = createTheming(MD3LightTheme),\n  ThemeProvider = _createTheming.ThemeProvider,\n  withTheme = _createTheming.withTheme,\n  useAppTheme = _createTheming.useTheme;\nexport { ThemeProvider, withTheme, useAppTheme };\nexport function useTheme(overrides) {\n  return useAppTheme(overrides);\n}\nexport var useInternalTheme = function useInternalTheme(themeOverrides) {\n  return useAppTheme(themeOverrides);\n};\nexport var withInternalTheme = function withInternalTheme(WrappedComponent) {\n  return withTheme(WrappedComponent);\n};\nexport var defaultThemesByVersion = {\n  2: {\n    light: MD2LightTheme,\n    dark: MD2DarkTheme\n  },\n  3: {\n    light: MD3LightTheme,\n    dark: MD3DarkTheme\n  }\n};\nexport var getTheme = function getTheme() {\n  var isDark = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var isV3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var themeVersion = isV3 ? 3 : 2;\n  var scheme = isDark ? 'dark' : 'light';\n  return defaultThemesByVersion[themeVersion][scheme];\n};\n\nexport function adaptNavigationTheme(themes) {\n  var light = themes.light,\n    dark = themes.dark;\n  var getAdaptedTheme = function getAdaptedTheme(navigationTheme, MD3Theme) {\n    return _objectSpread(_objectSpread({}, navigationTheme), {}, {\n      colors: _objectSpread(_objectSpread({}, navigationTheme.colors), {}, {\n        primary: MD3Theme.colors.primary,\n        background: MD3Theme.colors.background,\n        card: MD3Theme.colors.elevation.level2,\n        text: MD3Theme.colors.onSurface,\n        border: MD3Theme.colors.outline,\n        notification: MD3Theme.colors.error\n      })\n    });\n  };\n  if (light && dark) {\n    var modes = ['light', 'dark'];\n    var MD3Themes = {\n      light: MD3LightTheme,\n      dark: MD3DarkTheme\n    };\n    var NavigationThemes = {\n      light: light,\n      dark: dark\n    };\n    var _modes$reduce = modes.reduce(function (prev, curr) {\n        return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, curr, getAdaptedTheme(NavigationThemes[curr], MD3Themes[curr])));\n      }, {\n        light: light,\n        dark: dark\n      }),\n      adaptedLight = _modes$reduce.light,\n      adaptedDark = _modes$reduce.dark;\n    return {\n      LightTheme: adaptedLight,\n      DarkTheme: adaptedDark\n    };\n  }\n  if (!light) {\n    return {\n      DarkTheme: getAdaptedTheme(dark, MD3DarkTheme)\n    };\n  }\n  return {\n    LightTheme: getAdaptedTheme(light, MD3LightTheme)\n  };\n}\nexport var getDynamicThemeElevations = function getDynamicThemeElevations(scheme) {\n  var elevationValues = ['transparent', 0.05, 0.08, 0.11, 0.12, 0.14];\n  return elevationValues.reduce(function (elevations, elevationValue, index) {\n    return _objectSpread(_objectSpread({}, elevations), {}, _defineProperty({}, \"level\" + index, index === 0 ? elevationValue : color(scheme.surface).mix(color(scheme.primary), elevationValue).rgb().string()));\n  }, {});\n};","map":{"version":3,"mappings":"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","names":["createTheming","color","MD2DarkTheme","MD2LightTheme","MD3DarkTheme","MD3LightTheme","DefaultTheme","ThemeProvider","withTheme","useAppTheme","useTheme","overrides","useInternalTheme","themeOverrides","withInternalTheme","WrappedComponent","defaultThemesByVersion","light","dark","getTheme","isDark","isV3","themeVersion","scheme","adaptNavigationTheme","themes","getAdaptedTheme","navigationTheme","MD3Theme","colors","primary","background","card","elevation","level2","text","onSurface","border","outline","notification","error","modes","MD3Themes","NavigationThemes","reduce","prev","curr","adaptedLight","adaptedDark","LightTheme","DarkTheme","getDynamicThemeElevations","elevationValues","elevations","elevationValue","index","surface","mix","rgb","string"],"sources":["theming.tsx"],"sourcesContent":["import type { ComponentType } from 'react';\n\nimport { $DeepPartial, createTheming } from '@callstack/react-theme-provider';\nimport color from 'color';\n\nimport {\n  MD2DarkTheme,\n  MD2LightTheme,\n  MD3DarkTheme,\n  MD3LightTheme,\n} from '../styles/themes';\nimport type {\n  InternalTheme,\n  MD3Theme,\n  MD3AndroidColors,\n  NavigationTheme,\n} from '../types';\n\nexport const DefaultTheme = MD3LightTheme;\n\nexport const {\n  ThemeProvider,\n  withTheme,\n  useTheme: useAppTheme,\n} = createTheming<unknown>(MD3LightTheme);\n\nexport function useTheme<T = MD3Theme>(overrides?: $DeepPartial<T>) {\n  return useAppTheme<T>(overrides);\n}\n\nexport const useInternalTheme = (\n  themeOverrides?: $DeepPartial<InternalTheme>\n) => useAppTheme<InternalTheme>(themeOverrides);\n\nexport const withInternalTheme = <Props extends { theme: InternalTheme }, C>(\n  WrappedComponent: ComponentType<Props & { theme: InternalTheme }> & C\n) => withTheme<Props, C>(WrappedComponent);\n\nexport const defaultThemesByVersion = {\n  2: {\n    light: MD2LightTheme,\n    dark: MD2DarkTheme,\n  },\n  3: {\n    light: MD3LightTheme,\n    dark: MD3DarkTheme,\n  },\n};\n\nexport const getTheme = (isDark = false, isV3 = true) => {\n  const themeVersion = isV3 ? 3 : 2;\n  const scheme = isDark ? 'dark' : 'light';\n\n  return defaultThemesByVersion[themeVersion][scheme];\n};\n\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: { light: NavigationTheme }): {\n  LightTheme: NavigationTheme;\n};\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: { dark: NavigationTheme }): {\n  DarkTheme: NavigationTheme;\n};\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: {\n  light: NavigationTheme;\n  dark: NavigationTheme;\n}): { LightTheme: NavigationTheme; DarkTheme: NavigationTheme };\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: any) {\n  const { light, dark } = themes;\n\n  const getAdaptedTheme = (\n    navigationTheme: NavigationTheme,\n    MD3Theme: MD3Theme\n  ) => {\n    return {\n      ...navigationTheme,\n      colors: {\n        ...navigationTheme.colors,\n        primary: MD3Theme.colors.primary,\n        background: MD3Theme.colors.background,\n        card: MD3Theme.colors.elevation.level2,\n        text: MD3Theme.colors.onSurface,\n        border: MD3Theme.colors.outline,\n        notification: MD3Theme.colors.error,\n      },\n    };\n  };\n\n  if (light && dark) {\n    const modes = ['light', 'dark'] as const;\n\n    const MD3Themes = {\n      light: MD3LightTheme,\n      dark: MD3DarkTheme,\n    };\n\n    const NavigationThemes = {\n      light,\n      dark,\n    };\n\n    const { light: adaptedLight, dark: adaptedDark } = modes.reduce(\n      (prev, curr) => {\n        return {\n          ...prev,\n          [curr]: getAdaptedTheme(NavigationThemes[curr], MD3Themes[curr]),\n        };\n      },\n      {\n        light,\n        dark,\n      }\n    );\n\n    return {\n      LightTheme: adaptedLight,\n      DarkTheme: adaptedDark,\n    };\n  }\n\n  if (!light) {\n    return {\n      DarkTheme: getAdaptedTheme(dark, MD3DarkTheme),\n    };\n  }\n\n  return {\n    LightTheme: getAdaptedTheme(light, MD3LightTheme),\n  };\n}\n\nexport const getDynamicThemeElevations = (scheme: MD3AndroidColors) => {\n  const elevationValues = ['transparent', 0.05, 0.08, 0.11, 0.12, 0.14];\n  return elevationValues.reduce((elevations, elevationValue, index) => {\n    return {\n      ...elevations,\n      [`level${index}`]:\n        index === 0\n          ? elevationValue\n          : color(scheme.surface)\n              .mix(color(scheme.primary), elevationValue as number)\n              .rgb()\n              .string(),\n    };\n  }, {});\n};\n"]},"metadata":{},"sourceType":"module"}